/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { ExpirationPlugin } from 'workbox-expiration';
import { cleanupOutdatedCaches, createHandlerBoundToURL, precacheAndRoute } from 'workbox-precaching';
import { NavigationRoute, registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

// auto-update on ready
// self.skipWaiting();
// clientsClaim();

cleanupOutdatedCaches();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

registerRoute(new NavigationRoute(createHandlerBoundToURL('/index.html')));

const iconPathMatch = /\/assets\/icon-\w+\.js/;
// Cache icon files as they are fetched. we don't precache all icons
// since there are hundreds of them and they are not all used in the app.
// We just cache the ones that are used.
registerRoute(
	// Add in any other file extensions or routing criteria as needed.
	({ url }) => url.origin === import.meta.env.VITE_PUBLIC_API_ORIGIN && iconPathMatch.test(url.pathname),
	new StaleWhileRevalidate({
		cacheName: 'icons',
		plugins: [
			// Ensure that once this runtime cache reaches a maximum size the
			// least-recently used files are removed.
			new ExpirationPlugin({ maxEntries: 200 }),
		],
	})
);

// Cache wasm files as they are fetched. we don't precache wasm as they're very large.
// We just cache the ones that are used.
registerRoute(
	// Add in any other file extensions or routing criteria as needed.
	({ url }) => url.origin === import.meta.env.VITE_PUBLIC_API_ORIGIN && url.pathname.endsWith('.wasm'),
	new StaleWhileRevalidate({
		cacheName: 'wasm',
		plugins: [
			// Ensure that once this runtime cache reaches a maximum size the
			// least-recently used files are removed.
			new ExpirationPlugin({ maxEntries: 200 }),
		],
	})
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
	if (event.data && event.data.type === 'SKIP_WAITING') {
		console.log('Skip waiting');
		self.skipWaiting();
	}
});
